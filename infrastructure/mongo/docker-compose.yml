services:
  mongo_user:
    container_name: mongo_user
    image: attiaimeed/droovo_backend_databases:mongo_user
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=service_a_db
    ports:
      - '${MONGO_USER_PORT}:27017'
    volumes:
      - mongo_user_data:/data/db
      - ./backup/mongo_user:/backup
      - ./logs/mongo1:/var/log/mongodb
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo_ride:
    container_name: mongo_ride
    image: attiaimeed/droovo_backend_databases:mongo_ride
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=service_b_db
    ports:
      - '${MONGO_RIDE_PORT}:27017'
    volumes:
      - mongo_ride_data:/data/db
      - ./backup/mongo_ride:/backup
      - ./logs/mongo2:/var/log/mongodb
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo_user_backup:
    image: mongo
    container_name: mongo_user_backup
    depends_on:
      - mongo_user
    volumes:
      - ./backup/mongo_user:/backup
      - ./mongo_user/mongo_user_backup.sh:/scripts/mongo_user_backup.sh
    entrypoint: [ "bash", "/scripts/mongo_user_backup.sh" ]
    env_file:
      - .env
    networks:
      - backend

  mongo_ride_backup:
    image: mongo
    container_name: mongo_ride_backup
    depends_on:
      - mongo_ride
    volumes:
      - ./backup/mongo_ride:/backup
      - ./mongo_ride/mongo_ride_backup.sh:/scripts/mongo_ride_backup.sh
    entrypoint: [ "bash", "/scripts/mongo_ride_backup.sh" ]
    env_file:
      - .env
    networks:
      - backend

  mongo_restore:
    image: mongo
    container_name: mongo_restore
    volumes:
      - ./backup:/restore
      - ./backup/restore.sh:/scripts/restore.sh
    entrypoint: [ "bash", "/scripts/restore.sh" ]
    env_file:
      - .env
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:8001"
    networks:
      - backend

  mongo-express-a:
    image: mongo-express
    container_name: mongo-express-a
    depends_on:
      - mongo_user
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo_user
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=iattia
      - ME_CONFIG_BASICAUTH_PASSWORD=tribes
    ports:
      - "8081:8081"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo-express-b:
    image: mongo-express
    container_name: mongo-express-b
    depends_on:
      - mongo_ride
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo_ride
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=iattia
      - ME_CONFIG_BASICAUTH_PASSWORD=tribes
    ports:
      - "8082:8081"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=backup_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "admin" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: mongo-exporter
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo_user:27017/admin
    ports:
      - "9216:9216"
    depends_on:
      - mongo_user
    networks:
      - backend

  backup_test_scheduler:
    profiles: [ "backup-tests" ]
    build:
      context: ./
      dockerfile: ./cronjobs/Dockerfile
    container_name: backup_test_scheduler
    volumes:
      - ./test:/app/test
      - ./logs:/app/logs
      - ./Makefile:/app/Makefile
      - ./.env:/app/.env
    depends_on:
      - mongo_user
      - mongo_ride
      - postgres
      - redis
    networks:
      - backend

volumes:
  mongo_user_data:
  mongo_ride_data:
  pgdata:

networks:
  backend:
    driver: bridge
